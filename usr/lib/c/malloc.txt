Dynamic Memory
--------------

I have been toying around with different memory management/allocation strategies
since the early 2000's. I will attempt to create a modern, scalable and thread-
friendly implementation of C Standard Library malloc-like allocator for the Zen
project. For those interested in fast allocators, I'm in awe of how fast the
lockless allocator seems to be:

	 http://locklessinc.com/articles/allocator_tricks/

I highly recommend skimming the lockless articles section for some hot material
on code optimisation and other aspects of software engineering.

Memory Buffer Layers
--------------------

				----------
	API LAYER	    ----| malloc |--------------------
   	    	            |   ----------   |		     |
	----------------------------------------------------------
   	    		    |		     |         	     |
      			---------	 ----------	 ---------
        LIBRARY LAYER	| block |        |  run   | 	 |  big  |
      			---------	 ----------	 ---------    
	    		    |		    |		     |
	----------------------------------------------------------
			    |		    |		     |
	    	       ----------- 	    |		 ---------
	SYSTEM LAYER   |   slab   |---------	 	 |  map  |
		       ------------			 ---------

API
---

ISO C Functions
---------------

void	      * malloc(size_t size);
void		free(void *ptr);
void	      * calloc(size_t n, size_t size);
void          * realloc(void *ptr, size_t size);
void	      * aligned_alloc(size_t align, size_t size);

Non-ISO C Functions
-------------------

int		posix_memalign(void **retptr, size_t align, size_t size);
void	      * valloc(size_t size);
void	      * memalign(size_t align, size_t size);
void	      * pvavlloc(size_t size);

LIBRARY
-------

void		memconf(struct memconf *conf);
void	      * memget(size_t align, size_t size, long flg);
void	      	memfree(void *ptr);
